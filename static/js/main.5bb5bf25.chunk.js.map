{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","reportWebVitals.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bb5bf25.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\nimport cx from 'classnames';\n\nimport styles from \"./Cards.module.css\";\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (!confirmed) {\n    return \"loading...\";\n  }\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n            <Typography variant=\"body2\">\n              Number of active cases of COVID-19{\" \"}\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={recovered.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n            <Typography variant=\"body2\">\n              Number of recoveries from COVID-19{\" \"}\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={deaths.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n            <Typography variant=\"body2\">\n              Number of deaths caused by COVID-19{\" \"}\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import axios from \"axios\";\n\nconst url = \"https://covid.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n    let changeableUrl = url;\n\n    if(country){\n        changeableUrl= `${url}/countries/${country}`;\n    }\n\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(changeableUrl);\n\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {}\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate,\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n\n    return countries.map((country) => country.name);\n  } catch (error) {}\n};\n","import React, {useState, useEffect} from 'react';\nimport { fetchDailyData} from '../../api';\nimport { Line, Bar} from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\nconst Chart=({data: {confirmed, recovered, deaths}, country})=>{\n    const [dailyData, setDailyData]= useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n        fetchAPI();\n    },[])\n\n    const lineChart = (dailyData.length ? (\n      <Line\n        data={{\n          labels: dailyData.map(({ date }) => date),\n          datasets: [{\n              data: dailyData.map(({ confirmed })=> confirmed),\n              label: 'Infected',\n              borderColor: '#3333ff',\n              fill: true,\n          }, {\n            data: dailyData.map(({ deaths })=> deaths),\n            label: 'Deaths',\n            borderColor: '#red',\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\n            fill: true,\n          }],\n        }}\n      />\n    ) : null\n    );\n\n    const barChart= (\n      confirmed\n      ? (\n        <Bar\n        data={{\n          labels: ['Infected', 'Recovered', 'Deaths'],\n          datasets: [{\n            label: 'People',\n            backgroundColor: [\n              'rgba(0, 0, 255, 0.5)',\n              'rgba(0, 255, 0, 0.5)',\n              'rgba(255, 0, 0, 0.5)',\n            ], \n            data: [ confirmed.value, recovered.value, deaths.value ]\n          }]\n        }}\n        options={{\n          legend: {display: false},\n          title: { display: true, text: `Current state in ${country}`},\n        }}\n        \n        />\n      ) : null\n    );\n\n    return(\n        <div className={styles.container}>\n            {country ? barChart : lineChart}\n        </div>\n    )\n}\n\nexport default Chart;","import React, {useState, useEffect} from 'react';\nimport {FormControl, NativeSelect} from '@material-ui/core';\n\nimport styles from './CountryPicker.module.css';\n\nimport { fetchCountries } from '../../api';\n\nconst CountryPicker=({handleCountryChange})=>{\n\nconst [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        };\n\n        fetchAPI();\n    }, [setFetchedCountries])\n    return (\n      <FormControl className={styles.formControl}>\n        <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n          <option value=\"global\">Global</option>\n          {fetchedCountries.map((country, i) => (\n            <option key={i} value={country}>\n              {country}\n            </option>\n          ))}\n        </NativeSelect>\n      </FormControl>\n    );\n}\n\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from 'react';\nimport { Cards, Chart, CountryPicker} from './components';\nimport styles from './App.module.css';\nimport { fetchData} from './api';\n\nimport coronaImage from './images/image.png';\n\nclass App extends React.Component {\n  state={\n    data: {},\n    country: '',\n  }\n\n  async componentDidMount() {\n    const fetchedData = await fetchData()\n\n    this.setState({data: fetchedData});\n  }\n\n  handleCountryChange = async (country) =>{\n    const fetchedData = await fetchData(country);\n\n    this.setState({data: fetchedData, country: country});\n  }\n  \n\n  render(){\n    const {data, country} = this.state;\n\n    return (\n    <div className={styles.container}>\n      <img className={styles.image} src={coronaImage} alt=\"COVID-19\"/>\n      <Cards data={data}/>\n      <CountryPicker handleCountryChange={this.handleCountryChange}/>\n      <Chart data={data} country={country}/>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};"],"sourceRoot":""}